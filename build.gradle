buildscript {
    repositories {
        mavenCentral ()
        maven {url 'http://repo1.maven.org/maven2'}
    }
}

subprojects {


    version=0.56
    group = 'org.egripse'

    apply {
        plugin 'maven'
        plugin 'java'
        plugin 'groovy'
        plugin 'eclipse'
        plugin 'idea'
    }

    repositories {
        mavenCentral () 
        maven {
           url 'http://www.fornax-platform.org/m2/repository'
        }
    }

    dependencies {
      compile localGroovy()
      compile gradleApi()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }
 
    artifacts {
      archives sourcesJar
    }

    // Tests in package integration are only called in task integrationtest and tests in
    // package reallife are called in task reallifetest
    test {
        exclude "**/integrationtest/**"
    }

    task integrationtest(type: Test) {
        include "**/integrationtest/**"
        jvmArgs "-XX:MaxPermSize=128m"
    }

    task reallifetest(type: Test) {
        include "**/reallife/**"
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.withType(Test).each { Test test ->
            test.ignoreFailures = true
        }
    }

    dependencies {
        compile gradleApi()
        compile localGroovy()
    }
}
def testprojects = [];
for (File f : projectDir.listFiles()) {
    if (f.name.startsWith("testproject") && f.isDirectory()) {
        testprojects.add(f.name)
    }
}

//////////////////////////////////   IDE Handling   ///////////////////////////////////


apply {
    plugin "idea"
}

//Because the test projects can't be subprohects (because you can test them isolated anymore) we must
//call the creation of the IDE files by hand

def subs = [];
project.subprojects.each {
    subs.add(':' + it.name + ':jar');
}


def testIdeaTasks = []
testprojects.each {
    String testDir = it;

    def newTaskIdea = tasks.create(name: "idea" + testDir, type: GradleBuild, dependsOn: [subs]) {
        dir = testDir
        tasks = ['cleanIdea', 'ideaModule']
    }
    testIdeaTasks.add(newTaskIdea)
}

tasks.ideaProject.dependsOn(testIdeaTasks)
tasks.ideaProject.dependsOn("cleanIdeaProject");

idea.project.vcs='Git'

subprojects {
  sourceCompatibility = 1.8
}
